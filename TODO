Create Command section in config file
Create ignore-signal key in config file
Introduce IGNORE_SIGNAL in flom_config.c
	use g_key_file_get_string_list to get a gchar** from key value file
	syntax for config file is here:
		https://github.com/joehakimrahme/Agros/wiki/Parsing-the-conf-file-with-GLib

Put command line option for "--signal-ignore="
Put file config option for "signalignore...."
Change man page
Write test cases
Document in the wiki for Jenkins integration
... something else??? ...


Possible ideas for future developments, if useful:

introduce a supplementary module build for Perl and Python to avoid installation before "make check" (verify other bindings like Java too...)

implement a loop for connect/bind if bind returns an error: this should help
to reduce the race condition between a closing daemon and a starting client.
See this thread: https://github.com/tiian/flom/issues/3

Other ideas.....

"object" resources with a state, a memory area, managed by FLoM to transform it in a "state manager" other than a "lock manager"; for flom client, the object will be dumped/restored to/from file

"vector" resources with an associative array of memory areas, managed by FLoM (evolution of "object"; for flom client, the vector will be dumped/restored to/from a zip file or a directory

RESTful interface implemented using Mongoose (?)

replace poll custom based implementation with libevent... (is it interesting?)

put inside function flom_accept_loop_chklockers a check if the thread associated to the locker is really active; if the thread leaved (due to an error), make a clean-up phase. This avoid a daemon crash after a thread terminated with an error, but listener thread has a "locker object" already active

implement FIFO, LIFO, FIRST FIT (for numerical resources) lock allocation policies
