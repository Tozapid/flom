AT_BANNER([Timestamp resources use case checks])

# trying valid formats
AT_SETUP([Valid formats])
# only seconds
AT_CHECK([flom -r [_t_a%S[1]] -- echo], [0], [ignore], [ignore])
# only minutes
AT_CHECK([flom -r [_t_a%M[1]] -- echo], [0], [ignore], [ignore])
# only minutes
AT_CHECK([flom -r [_t_a%H[1]] -- echo], [0], [ignore], [ignore])
# seconds and tenths of a second
AT_CHECK([flom -r [_t_a%S#f[1]] -- echo], [0], [ignore], [ignore])
# minutes and undredths of a second
AT_CHECK([flom -r [_t_a%M#ff[1]] -- echo], [0], [ignore], [ignore])
# hours and thousandths of a second
AT_CHECK([flom -r [_t_a%H#fff[1]] -- echo], [0], [ignore], [ignore])
# composite formats that changes once per second
AT_CHECK([flom -r [_t_a%c[1]] -- echo], [0], [ignore], [ignore])
AT_CHECK([flom -r [_t_a%r[1]] -- echo], [0], [ignore], [ignore])
AT_CHECK([flom -r [_t_a%s[1]] -- echo], [0], [ignore], [ignore])
AT_CHECK([flom -r [_t_a%T[1]] -- echo], [0], [ignore], [ignore])
AT_CHECK([flom -r [_t_a%X[1]] -- echo], [0], [ignore], [ignore])
# composite format that changes once per minute
AT_CHECK([flom -r [_t_a%R[1]] -- echo], [0], [ignore], [ignore])
# composite format that changes once per hour
AT_CHECK([flom -r [_t_a%I[1]] -- echo], [0], [ignore], [ignore])
AT_CLEANUP

# trying invalid formats
AT_SETUP([Invalid formats (slow formats)])
AT_CHECK([flom -r [_t_invalid%a%A%b%B%d%D%e%E%F%G%g%h%j%m%p%P%u%U%V%w%W%x%y%Y%z%Z[1]] -- echo], [@_ES_GENERIC_ERROR@], [ignore], [ignore])
# with just a second or a fraction of a second, it becomes valid!
AT_CHECK([flom -r [_t_invalid#f%a%A%b%B%d%D%e%E%F%G%g%h%j%m%p%P%u%U%V%w%W%x%y%Y%z%Z[1]] -- echo], [0], [ignore], [ignore])
AT_CLEANUP

# Generate a basic timestamp: 1, 2, 3!
AT_SETUP([Use case 19 (1/10)])
AT_DATA([expout],
[[ 1 locking for 0 seconds
 1 ending
 2 locking for 0 seconds
 2 ending
 3 locking for 0 seconds
 3 ending
]])
AT_CHECK([pkill flom], [ignore], [ignore], [ignore])
AT_CHECK([flom_test_exec4.sh 1 0 0 "-i 1000 -r [_t_tmstmp%S#f[1]]" >>stdout], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec4.sh 2 0 0 "-i 1000 -r [_t_tmstmp%S#f[1]]" >>stdout], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec4.sh 3 0 0 "-i 1000 -r [_t_tmstmp%S#f[1]]" >>stdout], [0], [ignore], [ignore])
AT_CHECK([cat stdout | grep -v '^tmstmp'], [0], [expout], [ignore])
AT_CLEANUP

# Lock on a timestamp
AT_SETUP([Use case 19 (2/10)])
AT_DATA([expout],
[[ 1 locking for 2 seconds
 2 locking for 2 seconds
 3 locking for 1 seconds
 1 ending
 4 locking for 0 seconds
 2 ending
 3 ending
 4 ending
]])
AT_CHECK([pkill flom], [ignore], [ignore], [ignore])
AT_CHECK([flom_test_exec4.sh 1 0 2 "-i 1000 -r [_t_tmstmp%S[1]]" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec4.sh 2 1 2 "-i 1000 -r [_t_tmstmp%S[1]]" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec4.sh 3 2 1 "-i 1000 -r [_t_tmstmp%S[1]]" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([@STDBUF_O0@ flom_test_exec4.sh 4 3 0 "-i 1000 -r [_t_tmstmp%S[1]]" >>stdout], [0], [ignore], [ignore])
AT_CHECK([cat stdout | grep -v '^tmstmp'], [0], [expout], [ignore])
AT_CLEANUP

# Multiple timestamp
AT_SETUP([Use case 19 (3/10)])
AT_DATA([expout],
[[ 1 locking for 6 seconds
 2 locking for 3 seconds
 3 locking for 5 seconds
 4 locking for 1 seconds
 2 ending
 4 ending
 1 ending
 3 ending
 5 locking for 0 seconds
 5 ending
]])
AT_CHECK([pkill flom], [ignore], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 6 0 "-r [_t_tmstmp%S#ff[3]]" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 2 1 3 1 "-r [_t_tmstmp%S#ff[3]]" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 3 2 5 0 "-r [_t_tmstmp%S#ff[3]]" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 4 3 1 0 "-r [_t_tmstmp%S#ff[3]]" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([@STDBUF_O0@ flom_test_exec5.sh 5 8 0 0 "-r [_t_tmstmp%S#ff[3]]" >>stdout], [0], [ignore], [ignore])
AT_CHECK([cat stdout | grep -v '^tmstmp'], [0], [expout], [ignore])
AT_CLEANUP

# unique timestamp, second 
AT_SETUP([Use case 19 (4/10)])
AT_DATA([expout],
[[3
]])
AT_CHECK([pkill flom], [ignore], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-i 1000 -r [_t_tmstmp%S[3]]" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-i 1000 -r [_t_tmstmp%S[3]]" >>stdout &], [0], [ignore], [ignore])
# we must be sure, this flom command will be executed as the last one!
AT_CHECK([sleep 2], [0], [ignore], [ignore])
AT_CHECK([@STDBUF_O0@ flom_test_exec5.sh 1 0 1 0 "-i 1000 -r [_t_tmstmp%S[3]]" >>stdout], [0], [ignore], [ignore])
AT_CHECK([cat stdout | grep '^tmstmp' | sort -u | wc -l], [0], [expout], [ignore])
AT_CLEANUP

# unique timestamp, tenth of a second, local socket
AT_SETUP([Use case 19 (5/10)])
AT_DATA([expout],
[[5
]])
AT_CHECK([pkill flom], [ignore], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-i 1000 -r [_t_tmstmp%S#f[3]]" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-i 1000 -r [_t_tmstmp%S#f[3]]" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-i 1000 -r [_t_tmstmp%S#f[3]]" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-i 1000 -r [_t_tmstmp%S#f[3]]" >>stdout &], [0], [ignore], [ignore])
# we must be sure, this flom command will be executed as the last one!
AT_CHECK([sleep 2], [0], [ignore], [ignore])
AT_CHECK([@STDBUF_O0@ flom_test_exec5.sh 1 0 1 0 "-i 1000 -r [_t_tmstmp%S#f[3]]" >>stdout], [0], [ignore], [ignore])
AT_CHECK([cat stdout | grep '^tmstmp' | sort -u | wc -l], [0], [expout], [ignore])
AT_CLEANUP

# unique timestamp, tenth of a second, localhost
AT_SETUP([Use case 19 (6/10)])
AT_DATA([expout],
[[5
]])
AT_CHECK([pkill flom], [ignore], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-a localhost -i 1000 -r [_t_tmstmp%S#f[3]]" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-a localhost -i 1000 -r [_t_tmstmp%S#f[3]]" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-a localhost -i 1000 -r [_t_tmstmp%S#f[3]]" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-a localhost -i 1000 -r [_t_tmstmp%S#f[3]]" >>stdout &], [0], [ignore], [ignore])
# we must be sure, this flom command will be executed as the last one!
AT_CHECK([sleep 2], [0], [ignore], [ignore])
AT_CHECK([@STDBUF_O0@ flom_test_exec5.sh 1 0 1 0 "-a localhost -i 1000 -r [_t_tmstmp%S#f[3]]" >>stdout], [0], [ignore], [ignore])
AT_CHECK([cat stdout | grep '^tmstmp' | sort -u | wc -l], [0], [expout], [ignore])
AT_CLEANUP

# unique timestamp, hundredth of a second, local socket
AT_SETUP([Use case 19 (7/10)])
AT_DATA([expout],
[[5
]])
AT_CHECK([pkill flom], [ignore], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-i 1000 -r [_t_tmstmp%S#ff[3]] -t /tmp/d1.trc -T c1.trc" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-i 1000 -r [_t_tmstmp%S#ff[3]] -t /tmp/d2.trc -T c2.trc" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-i 1000 -r [_t_tmstmp%S#ff[3]] -t /tmp/d3.trc -T c3.trc" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-i 1000 -r [_t_tmstmp%S#ff[3]] -t /tmp/d4.trc -T c4.trc" >>stdout &], [0], [ignore], [ignore])
# we must be sure, this flom command will be executed as the last one!
AT_CHECK([sleep 2], [0], [ignore], [ignore])
AT_CHECK([@STDBUF_O0@ flom_test_exec5.sh 1 0 1 0 "-i 1000 -r [_t_tmstmp%S#ff[3]] -t /tmp/d5.trc -T c5.trc" >>stdout], [0], [ignore], [ignore])
AT_CHECK([cat stdout | grep '^tmstmp' | sort -u | wc -l], [0], [expout], [ignore])
AT_CLEANUP

# unique timestamp, hundredth of a second, localhost
AT_SETUP([Use case 19 (8/10)])
AT_DATA([expout],
[[5
]])
AT_CHECK([pkill flom], [ignore], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-a localhost -i 1000 -r [_t_tmstmp%S#ff[3]] -t /tmp/d1.trc -T c1.trc" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-a localhost -i 1000 -r [_t_tmstmp%S#ff[3]] -t /tmp/d2.trc -T c2.trc" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-a localhost -i 1000 -r [_t_tmstmp%S#ff[3]] -t /tmp/d3.trc -T c3.trc" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-a localhost -i 1000 -r [_t_tmstmp%S#ff[3]] -t /tmp/d4.trc -T c4.trc" >>stdout &], [0], [ignore], [ignore])
# we must be sure, this flom command will be executed as the last one!
AT_CHECK([sleep 2], [0], [ignore], [ignore])
AT_CHECK([@STDBUF_O0@ flom_test_exec5.sh 1 0 1 0 "-a localhost -i 1000 -r [_t_tmstmp%S#ff[3]] -t /tmp/d5.trc -T c5.trc" >>stdout], [0], [ignore], [ignore])
AT_CHECK([cat stdout | grep '^tmstmp' | sort -u | wc -l], [0], [expout], [ignore])
AT_CLEANUP

# unique timestamp, thousandth of a second, local socket
AT_SETUP([Use case 19 (9/10)])
AT_DATA([expout],
[[5
]])
AT_CHECK([pkill flom], [ignore], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-i 1000 -r [_t_tmstmp%S#fff[3]] -t /tmp/d1.trc -T c1.trc" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-i 1000 -r [_t_tmstmp%S#fff[3]] -t /tmp/d2.trc -T c2.trc" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-i 1000 -r [_t_tmstmp%S#fff[3]] -t /tmp/d3.trc -T c3.trc" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-i 1000 -r [_t_tmstmp%S#fff[3]] -t /tmp/d4.trc -T c4.trc" >>stdout &], [0], [ignore], [ignore])
# we must be sure, this flom command will be executed as the last one!
AT_CHECK([sleep 2], [0], [ignore], [ignore])
AT_CHECK([@STDBUF_O0@ flom_test_exec5.sh 1 0 1 0 "-i 1000 -r [_t_tmstmp%S#fff[3]] -t /tmp/d5.trc -T c5.trc" >>stdout], [0], [ignore], [ignore])
AT_CHECK([cat stdout | grep '^tmstmp' | sort -u | wc -l], [0], [expout], [ignore])
AT_CLEANUP

# unique timestamp, thousandth of a second, localhost
AT_SETUP([Use case 19 (10/10)])
AT_DATA([expout],
[[5
]])
AT_CHECK([pkill flom], [ignore], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-a localhost -i 1000 -r [_t_tmstmp%S#fff[3]] -t /tmp/d1.trc -T c1.trc" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-a localhost -i 1000 -r [_t_tmstmp%S#fff[3]] -t /tmp/d2.trc -T c2.trc" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-a localhost -i 1000 -r [_t_tmstmp%S#fff[3]] -t /tmp/d3.trc -T c3.trc" >>stdout &], [0], [ignore], [ignore])
AT_CHECK([flom_test_exec5.sh 1 0 1 0 "-a localhost -i 1000 -r [_t_tmstmp%S#fff[3]] -t /tmp/d4.trc -T c4.trc" >>stdout &], [0], [ignore], [ignore])
# we must be sure, this flom command will be executed as the last one!
AT_CHECK([sleep 2], [0], [ignore], [ignore])
AT_CHECK([@STDBUF_O0@ flom_test_exec5.sh 1 0 1 0 "-a localhost -i 1000 -r [_t_tmstmp%S#fff[3]] -t /tmp/d5.trc -T c5.trc" >>stdout], [0], [ignore], [ignore])
AT_CHECK([cat stdout | grep '^tmstmp' | sort -u | wc -l], [0], [expout], [ignore])
AT_CLEANUP

