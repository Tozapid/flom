=pod

=head1 NAME

Flom - Perl5 bindings for FLoM - The Free Lock Manager

=head1 SYNOPSIS

 use Flom;

 my $rc;
 my $handle = Flom::flom_handle_t->new();
 
 if (($rc = Flom::handle_init($handle)) != Flom::RC_OK) {
 
 }
 
 if (($rc = Flom::handle_lock($handle)) != Flom::RC_OK) {
 
 }

 if (($rc = Flom::handle_unlock($handle)) != Flom::RC_OK) {
 
 }

 if (($rc = Flom::handle_clean($handle)) != Flom::RC_OK) {
 
 }

Here we are initializing the handle using the OO method. When doing this
the memory is automatically released on process rundown. Just like
real Perl programing, or you may wish to initialize the handle like this:

 my $handle = Flom::handle_new();
 
If you do this, then will you need to deinitialize the handle like this. 

 Flom::handle_delete($handle);

This will free memory that may bleed thru. Just like real C programming.

=head1 DESCRIPTION

This module is a SWIG generated wrapper over FLoM's C based api. Every 
function and constant that is available in the C api, is available in the
Perl5 wrapper. You may use the C based documentation on how to use this
module.

=head1 METHODS

In the C based api, the defined name space for functions begins with
"flom_". The Perl5 wrapper flattens this and uses "Flom::". This makes 
the Perl5 api more perlish.

=head1 CONSTANTS

In the C based api, the defined name space for constants begins with a 
"FLOM_". The Perl5 wrapper flattens this and uses "Flom::". Also the
constants are subroutines instead of readonly variables. This makes the 
Perl5 api more perlish.

=head1 SEE ALSO

=over 4

=item L<FLoM|https://sourceforge.net/projects/flom/>

=back

=head1 AUTHOR

Kevin L. Esteb, E<lt>kevin@kesteb.usE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2016 Kevin L. Esteb

This is free software; you can redistribute it and/or modify it under
the same terms of FLoM itself.

=cut
